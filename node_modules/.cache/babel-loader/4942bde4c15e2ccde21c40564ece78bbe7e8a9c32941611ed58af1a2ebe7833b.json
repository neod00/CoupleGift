{"ast":null,"code":"import { coupangService } from './coupangService';\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nexport const getGiftRecommendations = async formData => {\n  if (!API_KEY) {\n    throw new Error('OpenAI API 키가 설정되지 않았습니다.');\n  }\n  const prompt = `\n당신은 커플 기념일 선물 추천 전문가입니다. 다음 정보를 바탕으로 3-4개의 선물을 추천해주세요.\n\n상대방 정보:\n- 성별: ${formData.gender === 'male' ? '남성' : '여성'}\n- 나이: ${formData.age}세\n- 성격/취향: ${formData.personality}\n- 기념일: ${formData.occasionType}\n- 예산: ${formData.minBudget.toLocaleString()}원 ~ ${formData.maxBudget.toLocaleString()}원\n- 선호 카테고리: ${formData.category || '전체'}\n- 추가 정보: ${formData.additionalInfo || '없음'}\n\n다음 JSON 형식으로 정확히 답변해주세요:\n{\n  \"recommendations\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"선물 이름\",\n      \"description\": \"선물에 대한 간단한 설명 (50자 이내)\",\n      \"price\": \"예상 가격 (예: 59,000원)\",\n      \"category\": \"카테고리\",\n      \"searchKeyword\": \"쿠팡 검색용 키워드 (구체적이고 간단하게)\"\n    }\n  ]\n}\n\n주의사항:\n- 예산 범위 내의 현실적인 가격으로 추천\n- 성별, 나이, 성격을 고려한 맞춤형 추천\n- 기념일 특성에 맞는 의미있는 선물 제안\n- searchKeyword는 쿠팡에서 실제 검색 가능한 단순한 키워드로 작성\n- JSON 형식을 정확히 지켜주세요\n`;\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [{\n          role: 'system',\n          content: '당신은 커플 기념일 선물 추천 전문가입니다. 사용자의 요구사항을 분석하여 최적의 선물을 JSON 형식으로 추천해주세요.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 1000,\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`API 요청 실패: ${response.status}`);\n    }\n    const data = await response.json();\n    const gptResponse = data.choices[0].message.content;\n\n    // JSON 파싱\n    const parsedResponse = JSON.parse(gptResponse);\n\n    // 각 추천 상품에 대해 실제 쿠팡 제품 검색\n    const recommendationsWithRealProducts = await Promise.all(parsedResponse.recommendations.map(async (rec, index) => {\n      try {\n        // 쿠팡에서 실제 제품 검색\n        const searchResult = await coupangService.searchProducts(rec.searchKeyword, 3);\n        if (searchResult.products.length > 0) {\n          // 첫 번째 검색 결과를 사용\n          const product = searchResult.products[0];\n          return {\n            id: rec.id,\n            title: product.productName,\n            description: rec.description,\n            price: `${product.productPrice.toLocaleString()}원`,\n            imageUrl: product.productImage,\n            coupangUrl: coupangService.generatePartnerLink(product.productUrl),\n            category: product.categoryName,\n            rating: product.rating,\n            reviewCount: product.ratingCount\n          };\n        } else {\n          // 검색 결과가 없으면 기본 정보 사용\n          return {\n            id: rec.id,\n            title: rec.title,\n            description: rec.description,\n            price: rec.price,\n            imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\n            coupangUrl: generateCoupangSearchLink(rec.searchKeyword),\n            category: rec.category\n          };\n        }\n      } catch (error) {\n        console.error(`제품 검색 오류 (${rec.title}):`, error);\n        // 오류 발생 시 기본 정보 사용\n        return {\n          id: rec.id,\n          title: rec.title,\n          description: rec.description,\n          price: rec.price,\n          imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\n          coupangUrl: generateCoupangSearchLink(rec.searchKeyword),\n          category: rec.category\n        };\n      }\n    }));\n    return {\n      recommendations: recommendationsWithRealProducts,\n      success: true\n    };\n  } catch (error) {\n    console.error('GPT API 오류:', error);\n    return {\n      recommendations: [],\n      success: false,\n      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n    };\n  }\n};\n\n// 쿠팡 검색 링크 생성 함수 (백업용)\nconst generateCoupangSearchLink = keyword => {\n  const partnerCode = process.env.REACT_APP_COUPANG_PARTNER_ID || 'AF1234567';\n  const encodedKeyword = encodeURIComponent(keyword);\n  return `https://link.coupang.com/a/${partnerCode}?url=https%3A%2F%2Fwww.coupang.com%2Fnp%2Fsearch%3Fq%3D${encodedKeyword}`;\n};\n\n// 쿠팡 파트너스 링크 생성 함수 (하위 호환성)\nconst generateCoupangPartnerLink = keyword => {\n  return generateCoupangSearchLink(keyword);\n};\n\n// 더미 데이터 생성 함수 (개발/테스트용)\nexport const getDummyRecommendations = async formData => {\n  // 실제 개발 시에는 이 함수를 사용하여 API 호출 없이 테스트 가능\n  await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 대기\n\n  const dummyRecommendations = [{\n    id: '1',\n    title: '커플 목걸이 세트',\n    description: '서로의 이름이 새겨진 특별한 커플 목걸이',\n    price: '59,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=커플목걸이',\n    coupangUrl: generateCoupangPartnerLink('커플 목걸이'),\n    category: '액세서리',\n    rating: 4.5,\n    reviewCount: 128\n  }, {\n    id: '2',\n    title: '프리미엄 향수 선물세트',\n    description: '은은한 향이 매력적인 프리미엄 향수',\n    price: '89,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=향수',\n    coupangUrl: generateCoupangPartnerLink('향수 선물세트'),\n    category: '뷰티',\n    rating: 4.2,\n    reviewCount: 89\n  }, {\n    id: '3',\n    title: '무선 이어폰',\n    description: '음질이 뛰어난 프리미엄 무선 이어폰',\n    price: '79,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=무선이어폰',\n    coupangUrl: generateCoupangPartnerLink('무선 이어폰'),\n    category: 'IT기기',\n    rating: 4.7,\n    reviewCount: 256\n  }];\n  return {\n    recommendations: dummyRecommendations,\n    success: true\n  };\n};","map":{"version":3,"names":["coupangService","API_URL","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","getGiftRecommendations","formData","Error","prompt","gender","age","personality","occasionType","minBudget","toLocaleString","maxBudget","category","additionalInfo","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","status","data","json","gptResponse","choices","message","parsedResponse","parse","recommendationsWithRealProducts","Promise","all","recommendations","map","rec","index","searchResult","searchProducts","searchKeyword","products","length","product","id","title","productName","description","price","productPrice","imageUrl","productImage","coupangUrl","generatePartnerLink","productUrl","categoryName","rating","reviewCount","ratingCount","encodeURIComponent","generateCoupangSearchLink","error","console","success","keyword","partnerCode","REACT_APP_COUPANG_PARTNER_ID","encodedKeyword","generateCoupangPartnerLink","getDummyRecommendations","resolve","setTimeout","dummyRecommendations"],"sources":["C:/Users/NT940XHA/OneDrive/Business/ai automation/CoupleGift/src/services/gptService.ts"],"sourcesContent":["import { GiftFormData, GiftRecommendation, GPTResponse } from '../types/gift';\r\nimport { coupangService } from './coupangService';\r\n\r\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\r\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\nexport const getGiftRecommendations = async (formData: GiftFormData): Promise<GPTResponse> => {\r\n  if (!API_KEY) {\r\n    throw new Error('OpenAI API 키가 설정되지 않았습니다.');\r\n  }\r\n\r\n  const prompt = `\r\n당신은 커플 기념일 선물 추천 전문가입니다. 다음 정보를 바탕으로 3-4개의 선물을 추천해주세요.\r\n\r\n상대방 정보:\r\n- 성별: ${formData.gender === 'male' ? '남성' : '여성'}\r\n- 나이: ${formData.age}세\r\n- 성격/취향: ${formData.personality}\r\n- 기념일: ${formData.occasionType}\r\n- 예산: ${formData.minBudget.toLocaleString()}원 ~ ${formData.maxBudget.toLocaleString()}원\r\n- 선호 카테고리: ${formData.category || '전체'}\r\n- 추가 정보: ${formData.additionalInfo || '없음'}\r\n\r\n다음 JSON 형식으로 정확히 답변해주세요:\r\n{\r\n  \"recommendations\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"title\": \"선물 이름\",\r\n      \"description\": \"선물에 대한 간단한 설명 (50자 이내)\",\r\n      \"price\": \"예상 가격 (예: 59,000원)\",\r\n      \"category\": \"카테고리\",\r\n      \"searchKeyword\": \"쿠팡 검색용 키워드 (구체적이고 간단하게)\"\r\n    }\r\n  ]\r\n}\r\n\r\n주의사항:\r\n- 예산 범위 내의 현실적인 가격으로 추천\r\n- 성별, 나이, 성격을 고려한 맞춤형 추천\r\n- 기념일 특성에 맞는 의미있는 선물 제안\r\n- searchKeyword는 쿠팡에서 실제 검색 가능한 단순한 키워드로 작성\r\n- JSON 형식을 정확히 지켜주세요\r\n`;\r\n\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-4o-mini',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: '당신은 커플 기념일 선물 추천 전문가입니다. 사용자의 요구사항을 분석하여 최적의 선물을 JSON 형식으로 추천해주세요.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ],\r\n        max_tokens: 1000,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const gptResponse = data.choices[0].message.content;\r\n    \r\n    // JSON 파싱\r\n    const parsedResponse = JSON.parse(gptResponse);\r\n    \r\n    // 각 추천 상품에 대해 실제 쿠팡 제품 검색\r\n    const recommendationsWithRealProducts = await Promise.all(\r\n      parsedResponse.recommendations.map(async (rec: any, index: number) => {\r\n        try {\r\n          // 쿠팡에서 실제 제품 검색\r\n          const searchResult = await coupangService.searchProducts(rec.searchKeyword, 3);\r\n          \r\n          if (searchResult.products.length > 0) {\r\n            // 첫 번째 검색 결과를 사용\r\n            const product = searchResult.products[0];\r\n            \r\n            return {\r\n              id: rec.id,\r\n              title: product.productName,\r\n              description: rec.description,\r\n              price: `${product.productPrice.toLocaleString()}원`,\r\n              imageUrl: product.productImage,\r\n              coupangUrl: coupangService.generatePartnerLink(product.productUrl),\r\n              category: product.categoryName,\r\n              rating: product.rating,\r\n              reviewCount: product.ratingCount\r\n            };\r\n          } else {\r\n            // 검색 결과가 없으면 기본 정보 사용\r\n            return {\r\n              id: rec.id,\r\n              title: rec.title,\r\n              description: rec.description,\r\n              price: rec.price,\r\n              imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\r\n              coupangUrl: generateCoupangSearchLink(rec.searchKeyword),\r\n              category: rec.category\r\n            };\r\n          }\r\n        } catch (error) {\r\n          console.error(`제품 검색 오류 (${rec.title}):`, error);\r\n          // 오류 발생 시 기본 정보 사용\r\n          return {\r\n            id: rec.id,\r\n            title: rec.title,\r\n            description: rec.description,\r\n            price: rec.price,\r\n            imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\r\n            coupangUrl: generateCoupangSearchLink(rec.searchKeyword),\r\n            category: rec.category\r\n          };\r\n        }\r\n      })\r\n    );\r\n\r\n    return {\r\n      recommendations: recommendationsWithRealProducts,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('GPT API 오류:', error);\r\n    return {\r\n      recommendations: [],\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\r\n    };\r\n  }\r\n};\r\n\r\n// 쿠팡 검색 링크 생성 함수 (백업용)\r\nconst generateCoupangSearchLink = (keyword: string): string => {\r\n  const partnerCode = process.env.REACT_APP_COUPANG_PARTNER_ID || 'AF1234567';\r\n  const encodedKeyword = encodeURIComponent(keyword);\r\n  \r\n  return `https://link.coupang.com/a/${partnerCode}?url=https%3A%2F%2Fwww.coupang.com%2Fnp%2Fsearch%3Fq%3D${encodedKeyword}`;\r\n};\r\n\r\n// 쿠팡 파트너스 링크 생성 함수 (하위 호환성)\r\nconst generateCoupangPartnerLink = (keyword: string): string => {\r\n  return generateCoupangSearchLink(keyword);\r\n};\r\n\r\n// 더미 데이터 생성 함수 (개발/테스트용)\r\nexport const getDummyRecommendations = async (formData: GiftFormData): Promise<GPTResponse> => {\r\n  // 실제 개발 시에는 이 함수를 사용하여 API 호출 없이 테스트 가능\r\n  await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 대기\r\n\r\n  const dummyRecommendations: GiftRecommendation[] = [\r\n    {\r\n      id: '1',\r\n      title: '커플 목걸이 세트',\r\n      description: '서로의 이름이 새겨진 특별한 커플 목걸이',\r\n      price: '59,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=커플목걸이',\r\n      coupangUrl: generateCoupangPartnerLink('커플 목걸이'),\r\n      category: '액세서리',\r\n      rating: 4.5,\r\n      reviewCount: 128\r\n    },\r\n    {\r\n      id: '2',\r\n      title: '프리미엄 향수 선물세트',\r\n      description: '은은한 향이 매력적인 프리미엄 향수',\r\n      price: '89,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=향수',\r\n      coupangUrl: generateCoupangPartnerLink('향수 선물세트'),\r\n      category: '뷰티',\r\n      rating: 4.2,\r\n      reviewCount: 89\r\n    },\r\n    {\r\n      id: '3',\r\n      title: '무선 이어폰',\r\n      description: '음질이 뛰어난 프리미엄 무선 이어폰',\r\n      price: '79,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=무선이어폰',\r\n      coupangUrl: generateCoupangPartnerLink('무선 이어폰'),\r\n      category: 'IT기기',\r\n      rating: 4.7,\r\n      reviewCount: 256\r\n    }\r\n  ];\r\n\r\n  return {\r\n    recommendations: dummyRecommendations,\r\n    success: true\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}