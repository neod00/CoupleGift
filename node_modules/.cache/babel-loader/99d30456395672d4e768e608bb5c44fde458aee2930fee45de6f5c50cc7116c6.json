{"ast":null,"code":"const API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nexport const getGiftRecommendations = async formData => {\n  if (!API_KEY) {\n    throw new Error('OpenAI API 키가 설정되지 않았습니다.');\n  }\n  const prompt = `\n당신은 커플 기념일 선물 추천 전문가입니다. 다음 정보를 바탕으로 3-4개의 선물을 추천해주세요.\n\n상대방 정보:\n- 성별: ${formData.gender === 'male' ? '남성' : '여성'}\n- 나이: ${formData.age}세\n- 성격/취향: ${formData.personality}\n- 기념일: ${formData.occasionType}\n- 예산: ${formData.minBudget.toLocaleString()}원 ~ ${formData.maxBudget.toLocaleString()}원\n- 선호 카테고리: ${formData.category || '전체'}\n- 추가 정보: ${formData.additionalInfo || '없음'}\n\n다음 JSON 형식으로 정확히 답변해주세요:\n{\n  \"recommendations\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"선물 이름\",\n      \"description\": \"선물에 대한 간단한 설명 (50자 이내)\",\n      \"price\": \"예상 가격 (예: 59,000원)\",\n      \"category\": \"카테고리\",\n      \"searchKeyword\": \"쿠팡 검색용 키워드 (구체적이고 간단하게)\"\n    }\n  ]\n}\n\n주의사항:\n- 예산 범위 내의 현실적인 가격으로 추천\n- 성별, 나이, 성격을 고려한 맞춤형 추천\n- 기념일 특성에 맞는 의미있는 선물 제안\n- searchKeyword는 쿠팡에서 실제 검색 가능한 단순한 키워드로 작성 (예: \"커플 목걸이\", \"무선 이어폰\", \"향수\")\n- JSON 형식을 정확히 지켜주세요\n`;\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [{\n          role: 'system',\n          content: '당신은 커플 기념일 선물 추천 전문가입니다. 사용자의 요구사항을 분석하여 최적의 선물을 JSON 형식으로 추천해주세요.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 1000,\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`API 요청 실패: ${response.status}`);\n    }\n    const data = await response.json();\n    const gptResponse = data.choices[0].message.content;\n\n    // JSON 파싱\n    const parsedResponse = JSON.parse(gptResponse);\n\n    // 각 추천 상품에 대해 쿠팡 검색 링크 생성\n    const recommendationsWithLinks = parsedResponse.recommendations.map((rec, index) => {\n      const searchKeyword = rec.searchKeyword || rec.title;\n      const coupangUrl = generateCoupangSearchLink(searchKeyword);\n\n      // 디버깅을 위한 로그\n      console.log(`🔍 추천 ${index + 1}:`, {\n        title: rec.title,\n        searchKeyword: searchKeyword,\n        coupangUrl: coupangUrl\n      });\n      return {\n        id: rec.id,\n        title: rec.title,\n        description: rec.description,\n        price: rec.price,\n        imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\n        coupangUrl: coupangUrl,\n        category: rec.category,\n        rating: 4.5,\n        // 기본 평점\n        reviewCount: Math.floor(Math.random() * 500) + 50 // 랜덤 리뷰 수\n      };\n    });\n    return {\n      recommendations: recommendationsWithLinks,\n      success: true\n    };\n  } catch (error) {\n    console.error('GPT API 오류:', error);\n    return {\n      recommendations: [],\n      success: false,\n      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n    };\n  }\n};\n\n// 쿠팡 파트너스 검색 링크 생성 함수\nconst generateCoupangSearchLink = keyword => {\n  const partnerId = process.env.REACT_APP_COUPANG_PARTNER_ID || '';\n  const encodedKeyword = encodeURIComponent(keyword);\n  if (partnerId) {\n    // 파트너 ID가 있으면 파트너스 링크 생성\n    return `https://link.coupang.com/a/${partnerId}?url=https%3A%2F%2Fwww.coupang.com%2Fnp%2Fsearch%3Fq%3D${encodedKeyword}`;\n  } else {\n    // 파트너 ID가 없으면 일반 검색 링크 생성\n    return `https://www.coupang.com/np/search?q=${encodedKeyword}`;\n  }\n};\n\n// 더미 데이터 생성 함수 (개발/테스트용)\nexport const getDummyRecommendations = async formData => {\n  // 실제 개발 시에는 이 함수를 사용하여 API 호출 없이 테스트 가능\n  await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 대기\n\n  const dummyRecommendations = [{\n    id: '1',\n    title: '커플 목걸이 세트',\n    description: '서로의 이름이 새겨진 특별한 커플 목걸이',\n    price: '59,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=커플목걸이',\n    coupangUrl: generateCoupangSearchLink('커플 목걸이'),\n    category: '액세서리',\n    rating: 4.5,\n    reviewCount: 128\n  }, {\n    id: '2',\n    title: '프리미엄 향수 선물세트',\n    description: '은은한 향이 매력적인 프리미엄 향수',\n    price: '89,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=향수',\n    coupangUrl: generateCoupangSearchLink('향수 선물세트'),\n    category: '뷰티',\n    rating: 4.2,\n    reviewCount: 89\n  }, {\n    id: '3',\n    title: '무선 이어폰',\n    description: '음질이 뛰어난 프리미엄 무선 이어폰',\n    price: '79,000원',\n    imageUrl: 'https://via.placeholder.com/300x200?text=무선이어폰',\n    coupangUrl: generateCoupangSearchLink('무선 이어폰'),\n    category: 'IT기기',\n    rating: 4.7,\n    reviewCount: 256\n  }];\n  return {\n    recommendations: dummyRecommendations,\n    success: true\n  };\n};","map":{"version":3,"names":["API_URL","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","getGiftRecommendations","formData","Error","prompt","gender","age","personality","occasionType","minBudget","toLocaleString","maxBudget","category","additionalInfo","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","status","data","json","gptResponse","choices","message","parsedResponse","parse","recommendationsWithLinks","recommendations","map","rec","index","searchKeyword","title","coupangUrl","generateCoupangSearchLink","console","log","id","description","price","imageUrl","encodeURIComponent","rating","reviewCount","Math","floor","random","success","error","keyword","partnerId","REACT_APP_COUPANG_PARTNER_ID","encodedKeyword","getDummyRecommendations","Promise","resolve","setTimeout","dummyRecommendations"],"sources":["C:/Users/NT940XHA/OneDrive/Business/ai automation/CoupleGift/src/services/gptService.ts"],"sourcesContent":["import { GiftFormData, GiftRecommendation, GPTResponse } from '../types/gift';\r\n\r\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\r\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\nexport const getGiftRecommendations = async (formData: GiftFormData): Promise<GPTResponse> => {\r\n  if (!API_KEY) {\r\n    throw new Error('OpenAI API 키가 설정되지 않았습니다.');\r\n  }\r\n\r\n  const prompt = `\r\n당신은 커플 기념일 선물 추천 전문가입니다. 다음 정보를 바탕으로 3-4개의 선물을 추천해주세요.\r\n\r\n상대방 정보:\r\n- 성별: ${formData.gender === 'male' ? '남성' : '여성'}\r\n- 나이: ${formData.age}세\r\n- 성격/취향: ${formData.personality}\r\n- 기념일: ${formData.occasionType}\r\n- 예산: ${formData.minBudget.toLocaleString()}원 ~ ${formData.maxBudget.toLocaleString()}원\r\n- 선호 카테고리: ${formData.category || '전체'}\r\n- 추가 정보: ${formData.additionalInfo || '없음'}\r\n\r\n다음 JSON 형식으로 정확히 답변해주세요:\r\n{\r\n  \"recommendations\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"title\": \"선물 이름\",\r\n      \"description\": \"선물에 대한 간단한 설명 (50자 이내)\",\r\n      \"price\": \"예상 가격 (예: 59,000원)\",\r\n      \"category\": \"카테고리\",\r\n      \"searchKeyword\": \"쿠팡 검색용 키워드 (구체적이고 간단하게)\"\r\n    }\r\n  ]\r\n}\r\n\r\n주의사항:\r\n- 예산 범위 내의 현실적인 가격으로 추천\r\n- 성별, 나이, 성격을 고려한 맞춤형 추천\r\n- 기념일 특성에 맞는 의미있는 선물 제안\r\n- searchKeyword는 쿠팡에서 실제 검색 가능한 단순한 키워드로 작성 (예: \"커플 목걸이\", \"무선 이어폰\", \"향수\")\r\n- JSON 형식을 정확히 지켜주세요\r\n`;\r\n\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-4o-mini',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: '당신은 커플 기념일 선물 추천 전문가입니다. 사용자의 요구사항을 분석하여 최적의 선물을 JSON 형식으로 추천해주세요.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ],\r\n        max_tokens: 1000,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API 요청 실패: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const gptResponse = data.choices[0].message.content;\r\n    \r\n    // JSON 파싱\r\n    const parsedResponse = JSON.parse(gptResponse);\r\n    \r\n    // 각 추천 상품에 대해 쿠팡 검색 링크 생성\r\n    const recommendationsWithLinks = parsedResponse.recommendations.map((rec: any, index: number) => {\r\n      const searchKeyword = rec.searchKeyword || rec.title;\r\n      const coupangUrl = generateCoupangSearchLink(searchKeyword);\r\n      \r\n      // 디버깅을 위한 로그\r\n      console.log(`🔍 추천 ${index + 1}:`, {\r\n        title: rec.title,\r\n        searchKeyword: searchKeyword,\r\n        coupangUrl: coupangUrl\r\n      });\r\n      \r\n      return {\r\n        id: rec.id,\r\n        title: rec.title,\r\n        description: rec.description,\r\n        price: rec.price,\r\n        imageUrl: `https://via.placeholder.com/300x200?text=${encodeURIComponent(rec.title)}`,\r\n        coupangUrl: coupangUrl,\r\n        category: rec.category,\r\n        rating: 4.5, // 기본 평점\r\n        reviewCount: Math.floor(Math.random() * 500) + 50 // 랜덤 리뷰 수\r\n      };\r\n    });\r\n\r\n    return {\r\n      recommendations: recommendationsWithLinks,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('GPT API 오류:', error);\r\n    return {\r\n      recommendations: [],\r\n      success: false,\r\n      error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\r\n    };\r\n  }\r\n};\r\n\r\n// 쿠팡 파트너스 검색 링크 생성 함수\r\nconst generateCoupangSearchLink = (keyword: string): string => {\r\n  const partnerId = process.env.REACT_APP_COUPANG_PARTNER_ID || '';\r\n  const encodedKeyword = encodeURIComponent(keyword);\r\n  \r\n  if (partnerId) {\r\n    // 파트너 ID가 있으면 파트너스 링크 생성\r\n    return `https://link.coupang.com/a/${partnerId}?url=https%3A%2F%2Fwww.coupang.com%2Fnp%2Fsearch%3Fq%3D${encodedKeyword}`;\r\n  } else {\r\n    // 파트너 ID가 없으면 일반 검색 링크 생성\r\n    return `https://www.coupang.com/np/search?q=${encodedKeyword}`;\r\n  }\r\n};\r\n\r\n// 더미 데이터 생성 함수 (개발/테스트용)\r\nexport const getDummyRecommendations = async (formData: GiftFormData): Promise<GPTResponse> => {\r\n  // 실제 개발 시에는 이 함수를 사용하여 API 호출 없이 테스트 가능\r\n  await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 대기\r\n\r\n  const dummyRecommendations: GiftRecommendation[] = [\r\n    {\r\n      id: '1',\r\n      title: '커플 목걸이 세트',\r\n      description: '서로의 이름이 새겨진 특별한 커플 목걸이',\r\n      price: '59,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=커플목걸이',\r\n      coupangUrl: generateCoupangSearchLink('커플 목걸이'),\r\n      category: '액세서리',\r\n      rating: 4.5,\r\n      reviewCount: 128\r\n    },\r\n    {\r\n      id: '2',\r\n      title: '프리미엄 향수 선물세트',\r\n      description: '은은한 향이 매력적인 프리미엄 향수',\r\n      price: '89,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=향수',\r\n      coupangUrl: generateCoupangSearchLink('향수 선물세트'),\r\n      category: '뷰티',\r\n      rating: 4.2,\r\n      reviewCount: 89\r\n    },\r\n    {\r\n      id: '3',\r\n      title: '무선 이어폰',\r\n      description: '음질이 뛰어난 프리미엄 무선 이어폰',\r\n      price: '79,000원',\r\n      imageUrl: 'https://via.placeholder.com/300x200?text=무선이어폰',\r\n      coupangUrl: generateCoupangSearchLink('무선 이어폰'),\r\n      category: 'IT기기',\r\n      rating: 4.7,\r\n      reviewCount: 256\r\n    }\r\n  ];\r\n\r\n  return {\r\n    recommendations: dummyRecommendations,\r\n    success: true\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}